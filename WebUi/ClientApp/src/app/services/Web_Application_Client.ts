//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ApplicantClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    applicantGet(applicantGetQuery: ApplicantGetQuery): Observable<ApplicantGetQueryResult> {
        let url_ = this.baseUrl + "/api/Applicant/ApplicantGet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(applicantGetQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApplicantGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplicantGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApplicantGetQueryResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApplicantGetQueryResult>;
        }));
    }

    protected processApplicantGet(response: HttpResponseBase): Observable<ApplicantGetQueryResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicantGetQueryResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    applicantListGet(applicantListGetQuery: ApplicantListGetQuery): Observable<ApplicantListGetQueryResult> {
        let url_ = this.baseUrl + "/api/Applicant/ApplicantListGet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(applicantListGetQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApplicantListGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplicantListGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApplicantListGetQueryResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApplicantListGetQueryResult>;
        }));
    }

    protected processApplicantListGet(response: HttpResponseBase): Observable<ApplicantListGetQueryResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicantListGetQueryResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    applicantSet(applicantSetCommand: ApplicantSetCommand): Observable<ApplicantSetCommandResult> {
        let url_ = this.baseUrl + "/api/Applicant/ApplicantSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(applicantSetCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApplicantSet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplicantSet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApplicantSetCommandResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApplicantSetCommandResult>;
        }));
    }

    protected processApplicantSet(response: HttpResponseBase): Observable<ApplicantSetCommandResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicantSetCommandResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ApplicationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    applicationListGet(applicationListGetQuery: ApplicationListGetQuery): Observable<ApplicationListGetQueryResult> {
        let url_ = this.baseUrl + "/api/Application/ApplicationListGet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(applicationListGetQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApplicationListGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplicationListGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApplicationListGetQueryResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApplicationListGetQueryResult>;
        }));
    }

    protected processApplicationListGet(response: HttpResponseBase): Observable<ApplicationListGetQueryResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationListGetQueryResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class SkillClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    skillListGet(skillListGetQuery: SkillListGetQuery): Observable<SkillListGetQueryResult> {
        let url_ = this.baseUrl + "/api/Skill/SkillListGet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(skillListGetQuery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSkillListGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSkillListGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SkillListGetQueryResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SkillListGetQueryResult>;
        }));
    }

    protected processSkillListGet(response: HttpResponseBase): Observable<SkillListGetQueryResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SkillListGetQueryResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    skillSet(skillSetCommand: SkillSetCommand): Observable<SkillSetCommandResult> {
        let url_ = this.baseUrl + "/api/Skill/SkillSet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(skillSetCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSkillSet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSkillSet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SkillSetCommandResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SkillSetCommandResult>;
        }));
    }

    protected processSkillSet(response: HttpResponseBase): Observable<SkillSetCommandResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SkillSetCommandResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ApplicantGetQueryResult implements IApplicantGetQueryResult {
    applicant!: ApplicantDto;

    constructor(data?: IApplicantGetQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.applicant = new ApplicantDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicant = _data["applicant"] ? ApplicantDto.fromJS(_data["applicant"]) : new ApplicantDto();
        }
    }

    static fromJS(data: any): ApplicantGetQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantGetQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicant"] = this.applicant ? this.applicant.toJSON() : <any>undefined;
        return data;
    }
}

export interface IApplicantGetQueryResult {
    applicant: ApplicantDto;
}

export class ApplicantDto implements IApplicantDto {
    id!: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate!: Date;
    applicationState?: EApplicationState | undefined;
    skillList?: SkillDto[] | undefined;

    constructor(data?: IApplicantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.applicationState = _data["applicationState"];
            if (Array.isArray(_data["skillList"])) {
                this.skillList = [] as any;
                for (let item of _data["skillList"])
                    this.skillList!.push(SkillDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApplicantDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthDate"] = this.birthDate ? formatDate(this.birthDate) : <any>undefined;
        data["applicationState"] = this.applicationState;
        if (Array.isArray(this.skillList)) {
            data["skillList"] = [];
            for (let item of this.skillList)
                data["skillList"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApplicantDto {
    id: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate: Date;
    applicationState?: EApplicationState | undefined;
    skillList?: SkillDto[] | undefined;
}

export enum EApplicationState {
    Applied = 0,
    Interview = 1,
    TechnicalInterview = 2,
    RecruitmentTest = 3,
    Hired = 4,
    Rejected = 5,
}

export class SkillDto implements ISkillDto {
    id!: number;
    description?: string | undefined;
    isCurrent?: boolean | undefined;

    constructor(data?: ISkillDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.isCurrent = _data["isCurrent"];
        }
    }

    static fromJS(data: any): SkillDto {
        data = typeof data === 'object' ? data : {};
        let result = new SkillDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["isCurrent"] = this.isCurrent;
        return data;
    }
}

export interface ISkillDto {
    id: number;
    description?: string | undefined;
    isCurrent?: boolean | undefined;
}

export class ApplicantGetQuery implements IApplicantGetQuery {
    applicantId?: number | undefined;

    constructor(data?: IApplicantGetQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicantId = _data["applicantId"];
        }
    }

    static fromJS(data: any): ApplicantGetQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantGetQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicantId"] = this.applicantId;
        return data;
    }
}

export interface IApplicantGetQuery {
    applicantId?: number | undefined;
}

export class ApplicantListGetQueryResult implements IApplicantListGetQueryResult {
    applicantList!: ApplicantDto[];

    constructor(data?: IApplicantListGetQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.applicantList = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["applicantList"])) {
                this.applicantList = [] as any;
                for (let item of _data["applicantList"])
                    this.applicantList!.push(ApplicantDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApplicantListGetQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantListGetQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.applicantList)) {
            data["applicantList"] = [];
            for (let item of this.applicantList)
                data["applicantList"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApplicantListGetQueryResult {
    applicantList: ApplicantDto[];
}

export class ApplicantListGetQuery implements IApplicantListGetQuery {
    applicationId?: number | undefined;

    constructor(data?: IApplicantListGetQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicationId = _data["applicationId"];
        }
    }

    static fromJS(data: any): ApplicantListGetQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantListGetQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationId"] = this.applicationId;
        return data;
    }
}

export interface IApplicantListGetQuery {
    applicationId?: number | undefined;
}

export class ApplicantSetCommandResult implements IApplicantSetCommandResult {

    constructor(data?: IApplicantSetCommandResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ApplicantSetCommandResult {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantSetCommandResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IApplicantSetCommandResult {
}

export class ApplicantSetCommand implements IApplicantSetCommand {
    applicant!: ApplicantDto;
    applicationId!: number;

    constructor(data?: IApplicantSetCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.applicant = new ApplicantDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicant = _data["applicant"] ? ApplicantDto.fromJS(_data["applicant"]) : new ApplicantDto();
            this.applicationId = _data["applicationId"];
        }
    }

    static fromJS(data: any): ApplicantSetCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantSetCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicant"] = this.applicant ? this.applicant.toJSON() : <any>undefined;
        data["applicationId"] = this.applicationId;
        return data;
    }
}

export interface IApplicantSetCommand {
    applicant: ApplicantDto;
    applicationId: number;
}

export class ApplicationListGetQueryResult implements IApplicationListGetQueryResult {
    applicationList!: ApplicationDto[];

    constructor(data?: IApplicationListGetQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.applicationList = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["applicationList"])) {
                this.applicationList = [] as any;
                for (let item of _data["applicationList"])
                    this.applicationList!.push(ApplicationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApplicationListGetQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationListGetQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.applicationList)) {
            data["applicationList"] = [];
            for (let item of this.applicationList)
                data["applicationList"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApplicationListGetQueryResult {
    applicationList: ApplicationDto[];
}

export class ApplicationDto implements IApplicationDto {
    id!: number;
    description?: string | undefined;
    applicantList?: ApplicantDto[] | undefined;

    constructor(data?: IApplicationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            if (Array.isArray(_data["applicantList"])) {
                this.applicantList = [] as any;
                for (let item of _data["applicantList"])
                    this.applicantList!.push(ApplicantDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApplicationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        if (Array.isArray(this.applicantList)) {
            data["applicantList"] = [];
            for (let item of this.applicantList)
                data["applicantList"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApplicationDto {
    id: number;
    description?: string | undefined;
    applicantList?: ApplicantDto[] | undefined;
}

export class ApplicationListGetQuery implements IApplicationListGetQuery {

    constructor(data?: IApplicationListGetQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ApplicationListGetQuery {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationListGetQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IApplicationListGetQuery {
}

export class SkillListGetQueryResult implements ISkillListGetQueryResult {
    skillList!: SkillDto[];

    constructor(data?: ISkillListGetQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.skillList = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["skillList"])) {
                this.skillList = [] as any;
                for (let item of _data["skillList"])
                    this.skillList!.push(SkillDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SkillListGetQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new SkillListGetQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.skillList)) {
            data["skillList"] = [];
            for (let item of this.skillList)
                data["skillList"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISkillListGetQueryResult {
    skillList: SkillDto[];
}

export class SkillListGetQuery implements ISkillListGetQuery {
    applicantId?: number | undefined;

    constructor(data?: ISkillListGetQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicantId = _data["applicantId"];
        }
    }

    static fromJS(data: any): SkillListGetQuery {
        data = typeof data === 'object' ? data : {};
        let result = new SkillListGetQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicantId"] = this.applicantId;
        return data;
    }
}

export interface ISkillListGetQuery {
    applicantId?: number | undefined;
}

export class SkillSetCommandResult implements ISkillSetCommandResult {

    constructor(data?: ISkillSetCommandResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): SkillSetCommandResult {
        data = typeof data === 'object' ? data : {};
        let result = new SkillSetCommandResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ISkillSetCommandResult {
}

export class SkillSetCommand implements ISkillSetCommand {
    applicantId!: number;
    skill!: SkillDto;

    constructor(data?: ISkillSetCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.skill = new SkillDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicantId = _data["applicantId"];
            this.skill = _data["skill"] ? SkillDto.fromJS(_data["skill"]) : new SkillDto();
        }
    }

    static fromJS(data: any): SkillSetCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SkillSetCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicantId"] = this.applicantId;
        data["skill"] = this.skill ? this.skill.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISkillSetCommand {
    applicantId: number;
    skill: SkillDto;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new SwaggerException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}